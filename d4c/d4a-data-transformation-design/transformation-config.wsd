@startuml TransformationConfig

interface Transformation {

}

interface TransformationGroup {
    transformation: Transformation[]
    dependencies?: TransformationGroup
}

Transformation ..l-> TransformationGroup

interface AddRowColumnDataSource {
  databasePath: string;
  columnNameAndType: ColumnTypeInfo;
  type?: string;
  dataSourcePath?: string;
}

interface AddRowColumnStepSetting {
  type: 'ADD_ROWS' | 'ADD_COLUMNS';
  step: number;
  insertDataIndex: number;
  originalDataSource: AddRowColumnDataSource;
  importDataSource?: AddRowColumnDataSource;
  matchSetting?: AddRowColumnMatchSetting;
  hideFirstStep?: boolean;
  isEdit?: boolean;
}



interface Step {
  visible: boolean;
  setting?: AddRowColumnStepSetting;
}

AddRowColumnStepSetting ..l-> Step
AddRowColumnDataSource ..l-> AddRowColumnStepSetting

Step ..u-> TransformationConfig
TransformationGroup ..> TransformationConfig

class TransformationConfig {
    -transformationGroups: TransformationGroup[]
    -selectedTransformationGroupId: string
    -selectedTransformationIndex: number
    -enableEdit: boolean
    -step: Step

    +setStep(step: Step)
    +setEnableEdit(enable: boolean)
    +setSelectedTransformationGroupId(id: string)
    +setSelectedTransformationIndex(index: number)
    +updateTransformationResult(results: Record<string, TransformationResult>)
    +updateLoadingState(transformationId: string, trasnformationGroupIndex: number, transformationIndex: number)
    +updateTransformation(transformationIndex: number, transformation: Transformation)
    +updateTransformations(transformationIndex: number, transformation?: Transformation))
    +addTransformationGroup(index: number, group: TransformationGroup)
    +deleteTransformationGroup()
}

@enduml